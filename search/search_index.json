{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Curso Virtualizaci\u00f3n de Escritorios con IsardVDI","text":"<p>Curso semana 1-5 Julio realizado en el CIFO la Violeta de Barcelona</p> <p></p> <p></p>"},{"location":"recursos/","title":"Recursos","text":""},{"location":"recursos/#plugin-firefox-multiples-pestanas","title":"PLUGIN FIREFOX M\u00daLTIPLES PESTA\u00d1AS:","text":"<ul> <li>multi account containers (https://addons.mozilla.org/en-US/firefox/addon/multi-account-containers/)</li> </ul>"},{"location":"recursos/#formacion-de-tecnologias-que-se-usan-en-isard","title":"Formaci\u00f3n de tecnolog\u00edas que se usan en Isard:","text":"<ul> <li>https://isard.gitlab.io/isardvdi-formacion/</li> </ul>"},{"location":"recursos/#clusters","title":"Cl\u00fasters","text":""},{"location":"recursos/#storage-drbd","title":"Storage. DRBD","text":"<ul> <li> <p>https://linbit.com</p> </li> <li> <p>https://linbit.com/blog/breaking-our-iops-record-what-linbits-success-means-for-our-clients/</p> </li> <li> <p>https://linbit.com/drbd-user-guide/drbd-guide-9_0-en/#s-three-way-repl</p> </li> </ul>"},{"location":"recursos/#ha-pacemaker","title":"HA. Pacemaker","text":"<ul> <li>https://clusterlabs.org/pacemaker/</li> </ul>"},{"location":"recursos/#libvirt","title":"Libvirt:","text":"<ul> <li>Especificicaciones del hardware virtual configurable con XML de libvirt: https://libvirt.org/formatdomain.html</li> </ul> <p>Para ver el contenido del XML de libvirt de un escritorio que se est\u00e1 ejecutando:</p> <p>Entrar en el hypervisor y lanzar comandos de virsh:</p> <pre><code># entrar dentro del contenedor de hypervisor:\ndocker exec -ti isard-hypervisor /bin/bash\n\n# una vez dentro:\nvirsh list\nvirsh dumpxml \"nombre de la maquina virtual que ha cantado el virsh list\"\n\n## Herramientas para documentar\n\nCrear esquemas con ascii:\n- [asciiflow](https://asciiflow.com/#/)\n- [textik](https://textik.com/)\n\nPara crear manuales:\n- [folge.me](https://folge.me/)\n- [Tango](https://www.tango.us/) (v\u00eda web)\n- [Scribe](https://scribehow.com/) (v\u00eda web)\n- [iorad](https://www.iorad.com/) (interactivo)\n\n## Automatizar instalaci\u00f3n de alpine\n- [unattended-installation-of-alpine-linux](https://www.skreutz.com/posts/unattended-installation-of-alpine-linux/)\n</code></pre>"},{"location":"instalaciones/configuraciones_hw/","title":"Configuraciones hw","text":""},{"location":"instalaciones/configuraciones_hw/#3-tipos-de-configuraciones-de-hardware-en-produccion","title":"3 tipos de configuraciones de hardware en producci\u00f3n","text":""},{"location":"instalaciones/instalacion_servidor_isardvdi/","title":"Instalaci\u00f3n de servidor de Isard all-in-one","text":"<p>C\u00f3mo montar un servidor IsardVDI en un servidor, en el curso lo hicimos sobre un servidor de OCI</p>"},{"location":"instalaciones/instalacion_servidor_isardvdi/#servidor-en-oci","title":"Servidor en oci","text":"<p>Instalar DockerCE (https://docs.docker.com/engine/install/ubuntu/) </p> <p>Clonar directorio</p> <pre><code>mkdir /opt/isard\ngit clone https://gitlab.com/isard/isardvdi /opt/isard/src\ncd /opt/isard/src\ncp isardvdi.cfg.example isardvdi.cfg\n</code></pre> <p>Modificar en isardvdi.cfg: <pre><code>DOMAIN=oci.cursoitb.xyz\nLETSENCRYPT_EMAIL=letsencrypt@cursoitb.xyz\nENABLE_STATS=true\nWEBAPP_ADMIN_PWD\nWEBAPP_SESSION_SECRET\nAPI_ISARDVDI_SECRET\nAPI_HYPERVISORS_SECRET\n</code></pre></p> <p>build, docker compose  pull / up <pre><code>./build.sh\ndocker compose pull\ndocker compose up -d\n</code></pre></p> <p>Subimos fichero de usuarios csv. Usuarios alumnos.</p>"},{"location":"instalaciones/instalacion_servidor_isardvdi/#directorios-de-isard-y-donde-guardar-datos","title":"Directorios de Isard y donde guardar datos","text":"<p>El c\u00f3digo lo puedes montar donde quieras, nosotros lo hacemos en /opt/isard/src La base de datos y alg\u00fan dato que ha de ser persistente /opt/isard-local Lo \"gordo\", las plantillas y los discos de escritorio est\u00e1n en:</p> <ul> <li>/opt/isard/groups: discos de escritorio</li> <li>/opt/isard/templates: discos de plantillas</li> <li>/opt/isard/volatiles: discos de escritorios vol\u00e1tiles</li> <li>/opt/isard/media: ficheros isos</li> </ul> <p>Es interesante dejar /opt/isard-local en un punto de montaje con un disco diferente de donde est\u00e1 el almacenamiento de qcows, porque si unos escritorios saturan la escritura me afectar\u00eda a la base de datos.</p> <p>Ejemplo de montaje: <pre><code>parted /dev/sdb mklabel gpt\nparted /dev/sdb mkpart primary 1M 100%\npvcreate /dev/sdb1\nvgcreate vgdatos /dev/sdb1\nlvcreate -l 95%FREE -n lvdatos vgdatos \nlvs\nmkfs.ext4 /dev/mapper/vgdatos-lvdatos \nmount /dev/mapper/vgdatos-lvdatos /mnt\n</code></pre></p> <p>Si quiero mover todos los datos a este nuevo disco: <pre><code>cd /opt/isard/src\ndocker compose down\nrsync -av --progress /opt/isard /mnt/\ncd /opt/\nmv isard isard_antiguo\nmkdir isard\numount /mnt \nmount /dev/mapper/vgdatos-lvdatos /opt/isard\n</code></pre></p> <p>Faltar\u00eda consolidar este montaje en el fstab para que se quede fijado en pr\u00f3ximos reinicios.</p>"},{"location":"practicas/1.-router_mikrotik_y_alpine/","title":"1. Routers con mikrotik y alpine linux","text":"<p>Queremos preparar una plantilla de router mikrotik y de alpine que pueda usarse en el siguiente escenario:</p> <pre><code>                                                         xxxx x xxx    \n                                                     xxx          xx   \n                                             xxxxxxxx              xx  \n                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            xx                       x  \n                  \u2502 ROUTER    \u2502           xx                        x  \n                  \u2502 defult    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500xx         internet       x  \n                  \u2502 isard     \u2502            xx                       x  \n                  \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518              xxxxxx                 x  \n                        \u2502.1                        x xx x x x  x x x   \n                        \u2502       red default                            \n     \u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500                  \n       \u2502                        192.168.120.0/22                       \n       \u2502                                                               \n  dhcp \u2502.x.y                                                           \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                                  \n\u2502    inet           \u2502                                                  \n\u2502                   \u2502                                                  \n\u2502  ESCRITORIO       \u2502dhcp    red wireguard-vpn                         \n\u2502  ROUTER ISARD  vpn\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n\u2502                   \u2502.X.Y      10.2.0.0/16                  \u2502          \n\u2502     lan1          \u2502                                       \u2502.0.1      \n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                               \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \n       \u2502.1                                          \u2502  FIREWALL      \u2502 \n       \u2502            red personal 1                  \u2502  ISARD         \u2502 \n    \u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \n                \u2502    192.168.88.0/24                       \u2502           \n            dhcp\u2502.X                                        \u2502           \n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                  \u250c\u2534\u2510          \n         \u2502    eth0     \u2502                                  \u2502V\u2502          \n         \u2502             \u2502                                  \u2502P\u2502          \n         \u2502  ESCRITORIO \u2502                                  \u2502N\u2502          \n         \u2502             \u2502                                  \u2514\u252c\u2518          \n         \u2502  acceso     \u2502                                   \u250210.0.X.Y   \n         \u2502  a internet \u2502                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502  por red    \u2502                        \u2502    wireguard        \u2502\n         \u2502  personal   \u2502                        \u2502                     \u2502\n         \u2502             \u2502                        \u2502       MI PC         \u2502\n         \u2502 configurar  \u2502                        \u2502 con fichero wireguad\u2502\n         \u2502 mikrotik    \u2502                        \u2502 de usuario isard    \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                        \u2502                     \u2502\n                                                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"practicas/1.-router_mikrotik_y_alpine/#mikrotik-routeros-en-isard","title":"Mikrotik RouterOS en Isard","text":"<p>Un escritorio con sistema operativo RouterOS de mikrotik que usaremos para dar acceso a internet a un escritorio que se conectar\u00e1 a la red personal. Este router har\u00e1 nat \"masquerade\" hacia la red default y tambi\u00e9n tendr\u00e1 un servidor dhcp. Se podr\u00e1 acceder tambi\u00e9n a trav\u00e9s de la red vpn personal para poderlo configurar desde nuestro pc. Esta configuraci\u00f3n puede servir de base para otras pr\u00e1cticas m\u00e1s complejas de redes.</p>"},{"location":"practicas/1.-router_mikrotik_y_alpine/#crear-escritorio-con-routeros-base-clonando-el-disco-desde-fichero-de-imagen","title":"Crear escritorio con routerOS base clonando el disco desde fichero de imagen","text":"<p>Creamos un desktop basado a partir de una iso de system rescue cd:</p> <p></p> <p>Arrancamos el system rescue cd, ahora queremos entrarle por ssh para poder copiar y pegar comandos... Para eso, como no tenemos interface gr\u00e1fica, lo mejor es conectarnos por ssh a ese escritorio. Para eso hemos de usar la vpn personal. Nos descargamos el fichero de vpn personal. Lo movemos a la carpeta de wireguard y le cambiamos el nombre de isard-vpn.conf a docente43.conf</p> <pre><code>sudo mv ~/Descargas/isard-vpn.conf /etc/wireguard/docente43.conf\n</code></pre> <p>Levantamos la vpn:</p> <pre><code>sudo wg-quick up docente43\n</code></pre> <p>En la card aparece la ip una vez el escritorio ha arrancado:</p> <p></p> <p>Verificamos que le podemos hacer ping desde nuestro equipo:</p> <pre><code>\u279c  ~ ping -c 1 10.2.239.24\nPING 10.2.239.24 (10.2.239.24) 56(84) bytes of data.\n64 bytes from 10.2.239.24: icmp_seq=1 ttl=63 time=23.8 ms\n\n--- 10.2.239.24 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 23.769/23.769/23.769/0.000 ms\n</code></pre> <p>Ahora para poder conectarnos por ssh hemos de hacer algunas configuraciones en el escritorio. Nos conectamos con el visor spice o vnc y hacemos varias operaciones:</p> <pre><code># cambiar el teclado a espa\u00f1ol\nsetkmap es\n\n# quitamos reglas de firewall y ponermos pol\u00edtica por defecto ACCEPT\n# iptables -X: Elimina todas las cadenas de reglas personalizadas menos las predeterminadas.\n# iptables -F: Borra todas las reglas dentro de todas las cadenas\n# iptables -P INPUT ACCEPT: Establece la pol\u00edtica predeterminada para la cadena INPUT.\n# Todas las conexiones entrantes ser\u00e1n aceptadas por defecto\niptables -X; iptables -F; iptables -P INPUT ACCEPT\n</code></pre> <p>verificamos que no quedan reglas de firewall y que el servicio de ssh est\u00e1 escuchando:</p> <pre><code>iptables-save\nss -tlnp\n</code></pre> <p>La salida esperada de estos comandos es: <pre><code>[root@sysrescue ~]# iptables-save\n*filter\n:INPUT ACCEPT [78:13518]\n:FORWARD DROP [0:0]\n:OUTPUT ACCEPT [172:18618]\n:LOGDROP - [0:0]\nCOMMIT\n\n[root@sysrescue ~]# ss -tlnp\nState        Recv-Q       Send-Q             Local Address:Port               Peer Address:Port       Process                              \nLISTEN       0            128                      0.0.0.0:22                      0.0.0.0:*           users:((\"sshd\",pid=375,fd=3))       \nLISTEN       0            128                         [::]:22                         [::]:*           users:((\"sshd\",pid=375,fd=4)) \n</code></pre></p> <p>cambiamos el password de root: <pre><code>passwd\n</code></pre></p> <p>Ya deber\u00edamos poder entrar por ssh al escritorio desde nuestra terminal:</p> <pre><code>ssh root@10.2.239.24\n</code></pre> <p>Una vez dentro del escritorio podemos ir copiando y pegando \u00f3rdenes.</p> <p>Vamos a la web de mikrotik al apartado de descargas donde est\u00e1n todas las versiones: </p> <p>https://mikrotik.com/download/archive</p> <p>Buscamos la imagen estable m\u00e1s reciente, en su vesi\u00f3n img,  chr-VERSION-img.zip, actualmente la \u00faltima estable es:  chr-7.14.3.img.zip.</p> <p>La url de descarga es: https://download.mikrotik.com/routeros/7.14.3/chr-7.14.3.img.zip</p> <p>y en la misma web de descargas nos indican que la firma sha256 de este fichero es: 064d82932c305c8fb8f681a526b2f159133684f74ca493560cfabdc00798d912</p> <p>Para descargar la imagen observamos que disponemos de 4GB en el directorio temporal <pre><code>[root@sysrescue ~]# df -h /tmp\nFilesystem      Size  Used Avail Use% Mounted on\ntmpfs           3.9G     0  3.9G   0% /tmp\n</code></pre></p> <p>Podemos descargar el fichero en este directorio y verificar la firma:</p> <pre><code>wget -O /tmp/routeros.img.zip https://download.mikrotik.com/routeros/7.14.3/chr-7.14.3.img.zip\nsha256sum /tmp/routeros.img.zip\n</code></pre> <p>Una vez verificada que la firma es v\u00e1lida, procedemos a descomprimir el contenido: <pre><code>unzip -d /tmp/ /tmp/routeros.img.zip\n</code></pre></p> <p>Que descomprime un fichero con una imagen de disco de 128M: <pre><code>[root@sysrescue /tmp]# ls -lh /tmp/*.img\n-rw-r--r-- 1 root root 128M Apr 17 13:50 /tmp/chr-7.14.3.img\n</code></pre></p> <p>Ahora hemos de clonar esta imagen en el disco virtual /dev/vda <pre><code>[root@sysrescue /tmp]# hdparm /dev/vda\n\n/dev/vda:\n readonly      =  0 (off)\n readahead     = 256 (on)\n geometry      = 41610/16/63, sectors = 41943040, start = 0\n</code></pre></p> <p>Para ello usaremos la herramienta dd: <pre><code># if: input file, en este caso el fichero de imagen de disco\n# of: output file, en este caso es un dispositivo de disco virtual\n# bs: tama\u00f1o de bloque de lectura y escritura, para ficheros grandes agiliza la escritura que si no por defecto se hace en bloques peque\u00f1os\n# status: le indica que queremos ir viendo el progreso, \u00fatil si el fichero fuese muy grande, en nuestro caso ser\u00e1 casi instant\u00e1neo\n\ndd if=/tmp/chr-7.14.3.img of=/dev/vda bs=1M status=progress\n</code></pre></p> <p>Ahora podemos apagar el escritorio virtual con: <pre><code>poweroff\n</code></pre></p> <p>Ahora podemos editar el escritorio, y prepararlo para crear una plantilla. Al editar: - vcpus: podemos dejar las dos vcpus - reducir la memoria a 1GB - cambiar boot a Disco Duro - redes en orden, podemos a\u00f1adir m\u00e1s o cambiar en funci\u00f3n de lo que deseemos que quede fijado en la plantilla, luego los alumnos la pueden cambiar al crear el escritorio. Es habitual que la primera interface de salida a internet (default), en nuestro caso la segunda dar\u00e1 acceso a la red de vpn (wireguardVPN) y la tercera interface estar\u00e1 conectada a la red personal (Personal1) - quitar iso de system rescue cd - subimos una imagen como logo de mikrotik y la seleccionamos</p> <p>Una vez hechos los cambios de hardware convertimos el escritorio en plantilla, de nombre: routeros 7.14</p> <p>Ahora ya podemos seguir trabajando con nuestro escritorio, que ahora estar\u00e1 basado en esta nueva plantilla.</p>"},{"location":"practicas/1.-router_mikrotik_y_alpine/#config-incial-mikrotik","title":"Config incial mikrotik","text":"<p>Una vez arranca el escritorio, habr\u00e1 pillado la imagen de mikrotik para arrancar y nos dar\u00e1 acceso a la l\u00ednea de \u00f3rdenes de mikrotik, como si nos hubi\u00e9semos conectado por telnet o puerto serie la primera vez al router. Nos ha de aparecer una pantalla como esta:</p> <p></p> <p>Entramos con admin / sin password</p> <p>Lo primero que nos pide es que le demos un password, en este caso le hemos puesto la contras\u00f1ea habitual de nuestras plantillas \"pirineus\". Y accedmos al prompt de mikrotik:</p> <p></p> <p>Podemos verificar que tiene salida a internet:</p> <p></p> <p>Lo primero que nos interesa es poder trabajar m\u00e1s c\u00f3modamente, con una terminal donde podamos hacer copy/paste y no con un visor que al no tener interface gr\u00e1fica no me permite usar el portapapeles entre el escritorio virtual y nuestro equipo.</p> <p>Para eso habremos de habilitar la interface de wireguard vpn. Habremos de decirle al router que queremos que en la segunda interface obtenga una ip por dhcp. La red de wireguard-VPN ofrece una ip din\u00e1mica pero sin gateway por defecto. </p> <p>Revisamos que las interfaces est\u00e1n activas y vemos el nombre que tienen:</p> <pre><code>interface print\n</code></pre> <p></p> <p>La segunda interface se llama ether2.</p> <p>Pasamos a configurar que obtenga una ip por dhcp, y esperamos hasta que obtenga ip:</p> <pre><code>ip dhcp-client add interface=ether2\n</code></pre> <p></p> <p>Revisamos que las ips y las rutas son correctas. Ha a\u00f1adido reglas de routing para que podamos acceder desde nuestro equipo a trav\u00e9s de la vpn personal:</p> <pre><code>ip address print\nip router print\n</code></pre> <p></p> <p>En este caso la ip que me se ha obtenido en la interface ether2 es 10.2.239.24</p> <p>Ya deber\u00edamos poder hacer ping y acceder por ssh desde nuestro equipo. Al conectar por ssh como anteriormente nos conectamos por esa misma ip al system rescue cd, es probable que nos diga que hay un conflicto de claves en ~/.ssh/known_hosts que podemos resolver borrando la clave anterior con:</p> <pre><code>ssh-keygen -f ~/.ssh/known_hosts -R \"LA_IP_DEL_ESCRITORIO_EN_LA_RED_DE_WIREGUARD_VPN\"\n</code></pre> <p>Para acceder lo har\u00edamos lo hemos de hacer con el usuario admin</p> <pre><code>ssh admin@LA_IP_DEL_ESCRITORIO_EN_LA_RED_DE_WIREGUARD_VPN\n</code></pre> <p>El resultado deber\u00eda ser algo similar a:</p> <pre><code>\u279c  ~ ssh admin@10.2.239.24                              \nThe authenticity of host '10.2.239.24 (10.2.239.24)' can't be established.\nRSA key fingerprint is SHA256:+xpN6EIEw3LTfCzrmH7VWOwGN1cRqCH4RhaB8LkATEs.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '10.2.239.24' (RSA) to the list of known hosts.\nadmin@10.2.239.24's password: \n\n\n  MMM      MMM       KKK                          TTTTTTTTTTT      KKK\n  MMMM    MMMM       KKK                          TTTTTTTTTTT      KKK\n  MMM MMMM MMM  III  KKK  KKK  RRRRRR     OOOOOO      TTT     III  KKK  KKK\n  MMM  MM  MMM  III  KKKKK     RRR  RRR  OOO  OOO     TTT     III  KKKKK\n  MMM      MMM  III  KKK KKK   RRRRRR    OOO  OOO     TTT     III  KKK KKK\n  MMM      MMM  III  KKK  KKK  RRR  RRR   OOOOOO      TTT     III  KKK  KKK\n\n  MikroTik RouterOS 7.14.3 (c) 1999-2024       https://www.mikrotik.com/\n\nPress F1 for help\n\n[admin@MikroTik] &gt; \n</code></pre> <p>Y ya tenemos acceso a wireguard por la l\u00ednea de comandos</p>"},{"location":"practicas/1.-router_mikrotik_y_alpine/#configurar-red-interna-con-servidor-de-dhcp-y-vpn","title":"Configurar red interna con servidor de dhcp y vpn","text":"<p>Ahora hemos de configurar una red interna donde queremos que el router haga de servidor dhcp y enmascare la salida a internet.</p> <p>Al haber accedido v\u00eda ssh ya podremos copiar y pegar comandos sin problemas. Los pasos ser\u00edan:</p> <ul> <li> <p>agrupamos las interfaces en WAN Y LAN</p> </li> <li> <p>asignar ip fija a la interface ether3</p> </li> <li> <p>crear pool de ips</p> </li> <li> <p>crear servidor dhcp con este pool de ips</p> </li> <li> <p>a\u00f1adir configuraci\u00f3n al servidor dhcp que hemos creao</p> </li> <li> <p>crear servidor dns que redirija peticiones a servidor dns externo</p> </li> <li> <p>configurar firewall para que enmascare la salida a internet desde la red interna</p> </li> <li> <p>segurizar que solamente desde la lan se permitan conexiones entrarntes por defecto</p> </li> <li> <p>cambiamos el nombre al router</p> </li> <li> <p>ajusamos reloj y zona horaria</p> </li> <li> <p>Renombramos las interfaces:</p> </li> <li> <p>ether1: inet (internet red default) </p> </li> <li>ether2: vpnisard (red wireguard vpn para conectarnos con nuestro fichero de vpn del usuario de isard)</li> <li>ether3: lan1 (red personal 1)</li> </ul> <pre><code># INTERFACES LIST\n/interface list\nadd comment=defconf name=WAN\nadd comment=defconf name=LAN\n\n/interface list member\nadd comment=defconf interface=ether3 list=LAN\nadd comment=defconf interface=ether2 list=LAN\nadd comment=defconf interface=ether1 list=WAN\n\n/ip neighbor discovery-settings\nset discover-interface-list=LAN\n\n# DIRECCION IP INTERNA\n/ip address\nadd address=192.168.88.1/24 comment=defconf interface=ether3 network=192.168.88.0\n\n# SERVIDOR DHCP\n/ip pool\nadd name=default-dhcp ranges=192.168.88.100-192.168.88.254\n/ip dhcp-server\nadd address-pool=default-dhcp interface=ether3 name=defconf\n/ip dhcp-server network\nadd address=192.168.88.0/24 comment=defconf gateway=192.168.88.1\n\n# SERVIDOR DNS\n/ip dns\nset allow-remote-requests=yes servers=8.8.8.8\n/ip dns static\nadd address=192.168.88.1 comment=defconf name=router.lan\n\n# FIREWALL MASQUERADE\n/ip firewall nat\nadd action=masquerade chain=srcnat comment=\"defconf: masquerade\" ipsec-policy=out,none \\\n    out-interface-list=WAN\n\n# FIREWALL\n/ip firewall filter\nadd action=accept chain=input comment=\"defconf: accept established,related,untracked\" \\\n    connection-state=established,related,untracked\nadd action=drop chain=input comment=\"defconf: drop invalid\" connection-state=invalid\nadd action=accept chain=input comment=\"defconf: accept ICMP\" protocol=icmp\nadd action=accept chain=input comment=\"defconf: accept to local loopback (for CAPsMAN)\" dst-address=\\\n    127.0.0.1\nadd action=drop chain=input comment=\"defconf: drop all not coming from LAN\" in-interface-list=!LAN\nadd action=accept chain=forward comment=\"defconf: accept in ipsec policy\" ipsec-policy=in,ipsec\nadd action=accept chain=forward comment=\"defconf: accept out ipsec policy\" ipsec-policy=out,ipsec\nadd action=fasttrack-connection chain=forward comment=\"defconf: fasttrack\" connection-state=\\\n    established,related hw-offload=yes\nadd action=accept chain=forward comment=\"defconf: accept established,related, untracked\" \\\n    connection-state=established,related,untracked\nadd action=drop chain=forward comment=\"defconf: drop invalid\" connection-state=invalid\nadd action=drop chain=forward comment=\"defconf: drop all from WAN not DSTNATed\" connection-nat-state=\\\n    !dstnat connection-state=new in-interface-list=WAN\n\n# CAMBIAMOS EL NOMBRE AL ROUTER\n\n/system identity\nset name=mkt_isard\n\n# Asignamos la zona horaria y sincronizamos correctamente\n/system clock\nset time-zone-name=Europe/Madrid\n/system ntp client\nset enabled=yes\n/system ntp client servers\nadd address=213.251.52.234\nadd address=158.227.98.15\n\n/system clock print\n\n# RENOMBRAR INTERFACES\n/interface ethernet\nset [ find default-name=ether1 ] disable-running-check=no name=inet\nset [ find default-name=ether3 ] disable-running-check=no name=lan1\nset [ find default-name=ether2 ] disable-running-check=no name=vpnisard\n</code></pre> <p>Y finalmente hacemos un backup de la configuraci\u00f3n actual por si la queremos recuperar:</p> <pre><code>/system backup save name=defconf\n</code></pre> <p>Podemos apagar el router desde dentro: </p> <pre><code>/system/shutdown\n</code></pre>"},{"location":"practicas/1.-router_mikrotik_y_alpine/#preparar-la-configuracion-del-router-como-plantilla","title":"Preparar la configuraci\u00f3n del router como plantilla","text":"<p>Si queremos que esta configuraci\u00f3n sirva como plantilla no es tan sencillo como si se tratase de un sistema operativo habitual de windows o linux. RouterOS retiene las direcciones MAC asociadas a las tarjetas en la configuraci\u00f3n y eso impide que lea bien la configuraci\u00f3n al clonar el disco con diferentes MAC. </p> <p>Cada escritorio derivado de una plantilla se crea con una MAC distinta en cada tarjeta, con lo que hay que realizar un poco m\u00e1s de trabajo para dejar lista la plantilla.</p> <p>Guardamos la configuraci\u00f3n en modo lista de \u00f3rdenes con la instrucci\u00f3n </p> <pre><code>/export file=inicial\n</code></pre> <p>Copiamos el fichero en local y a\u00f1adimos una l\u00ednea inicial para eliminar la configuraci\u00f3n de cliente por dhcp que viene en la config por defecto</p> <p>Desde nuestro PC o desde el cliente de vitalinux:</p> <pre><code>scp admin@IP_DEL_ROUTER:/inicial.rsc ~/tmp/inicial.rsc\n</code></pre> <p>Modificamos el fichero inicial.rsc a\u00f1adiendo remove 0 en la parte de configuraci\u00f3n del cliente de dhcp, ya que en al borrar la configuraci\u00f3n crea un cliente dhcp por defecto. En el fichero que nos hemos descargado del router tenemos:</p> <pre><code>/ip dhcp-client\nadd interface=inet\nadd interface=vpnisard\n</code></pre> <p>Y esa parte se ha de modificar por:</p> <pre><code>/ip dhcp-client\nremove 0\nadd interface=inet\nadd interface=vpnisard\n</code></pre> <p>Ahora s\u00f3lo nos queda volver a subir el fichero al router y sobreescribirlo:</p> <pre><code>scp ~/tmp/inicial.rsc admin@IP_DEL_ROUTER:/inicial.rsc\n</code></pre> <p>Podemos ver el listado de ficheros y verificar que el fichero ha subido adecuadamente mirando el CREATION-TIME </p> <pre><code>/file/print\n</code></pre> <p>Finalmente s\u00f3lo nos queda decirle al router que reset de la configuraci\u00f3n, que cuando inicie por primera vez importe las \u00f3rdenes del fichero inicial.rsc y verificar que ha pillado bien la configuraci\u00f3n de nuevo:</p> <pre><code>/system/reset-configuration no-defaults=yes run-after-reset=inicial.rsc\n</code></pre> <p>Reiniciar\u00e1 como si fuera la primera vez, hemos de poner usuario admin / sin password.</p> <p>Verificamos que no hay mensajes de error y que la configuraci\u00f3n parece correcta</p> <pre><code>/log/print\n/export\n</code></pre> <p>y ahora hemos de repetir el reset de la configuraci\u00f3n pero que ahora se apague para que podamos clonar el estado actual del disco duro del router en una plantilla.</p> <pre><code>/system/reset-configuration no-defaults=yes run-after-reset=inicial.rsc shutdown=yes\n</code></pre> <p>El escritorio se apaga. Ahora es cuando hemos de crear la plantilla de nombre router 7.14 inet-vpn-lan</p> <p>Para verificar que todo va bien hemos de crear un nuevo escritorio de prueba basado en esta plantilla, no nos vale con el actual que conservar\u00e1 las mismas MAC, y ver que la configuraci\u00f3n ha funcionado.</p> <p>Creamos un escritorio de nombre \"prueba\" basado en la plantilla \"router 7.14 inet-vpn-lan\" y verificamos que todo funciona correctamente. Si es as\u00ed ya podemos usar esta plantilla en nuestras clases.</p>"},{"location":"practicas/1.-router_mikrotik_y_alpine/#cliente-en-red-interna","title":"Cliente en red interna","text":"<p>Creamos un escritorio cliente:</p> <ul> <li>plantilla: vitalinux, ubuntu, windows</li> <li>redes: s\u00f3lo una red personal1</li> </ul> <p>Si nos conectamos por el cliente spice podremos hacer copy/paste al escritorio</p> <p>Por ejemplo desde dentro de vitalinux verificamos:</p> <ul> <li>verificar que nos ha dado ip por dhcp</li> <li>verificar que funciona el masquerade haciendo ping a 8.8.8.8</li> <li>verificar que la configuraci\u00f3n de dns es la correcta</li> <li>verificar que podemos hacer ping a una direcci\u00f3n dns</li> </ul> <pre><code>ip -c a s ens3\nping -c 1 8.8.8.8\nsystemd-resolve --status ens3\nping -c 1 www.google.es\n</code></pre> <p>Y el resultado esperado es:</p> <pre><code>isard@vitalinux:~/Desktop$ ip -c a s ens3\n2: ens3: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000\n    link/ether 52:54:00:75:d3:0b brd ff:ff:ff:ff:ff:ff\n    inet 192.168.88.254/24 brd 192.168.88.255 scope global dynamic noprefixroute ens3\n       valid_lft 1581sec preferred_lft 1581sec\n    inet6 fe80::a8d3:848f:4f11:3ca8/64 scope link noprefixroute \n       valid_lft forever preferred_lft forever\nisard@vitalinux:~/Desktop$ ping -c 1 8.8.8.8\nPING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.\n64 bytes from 8.8.8.8: icmp_seq=1 ttl=116 time=15.0 ms\n\n--- 8.8.8.8 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 15.017/15.017/15.017/0.000 ms\nisard@vitalinux:~/Desktop$ systemd-resolve --status ens3\nLink 2 (ens3)\n      Current Scopes: DNS\n       LLMNR setting: yes\nMulticastDNS setting: no\n      DNSSEC setting: no\n    DNSSEC supported: no\n         DNS Servers: 192.168.88.1\n                      192.168.120.1\n          DNS Domain: ~.\nisard@vitalinux:~/Desktop$ ping -c 1 www.google.es\nPING www.google.es (216.58.215.163) 56(84) bytes of data.\n64 bytes from mad41s07-in-f3.1e100.net (216.58.215.163): icmp_seq=1 ttl=116 time=19.3 ms\n\n--- www.google.es ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 19.352/19.352/19.352/0.000 ms\n</code></pre>"},{"location":"practicas/1.-router_mikrotik_y_alpine/#usar-la-herramienta-con-entorno-grafico-winbox-para-configurar-la-mikrotik","title":"Usar la herramienta con entorno gr\u00e1fico winbox para configurar la mikrotik","text":"<p>Desde un cliente conectado a la lan podemos usar la herramienta winbox. Por ejemplo lo podemos hacer desde el escritorio de vitalinux. </p> <p>Vitalinux ya lleva instalado el paquete wine, en otras distribuciones de linux hace falta instalarlo, en windows no es necesario. Wine permite arrancar ciertas aplicaciones compiladas para windows dentro de linux. </p> <p>Podemos descargar winbox desde la web de mikrotik. Desde un terminal podemos descargarlo tambi\u00e9n:</p> <pre><code>wget -O ~/winbox.exe https://download.mikrotik.com/routeros/winbox/3.40/winbox64.exe\n</code></pre> <p>Y para arrancarlo:</p> <pre><code>wine ~/winbox.exe \n</code></pre> <p>Si es la primera vez que arrancamos wine aparecen mensajes reclamando instalaciones extras podemos descartarlas porque no se necesitan para que funcione winbox. </p> <p>Llegamos a una pantalla como esta donde podemos poner la ip del router y el password:</p> <p></p> <p>Podemos descargar un icono de escritorio:</p> <pre><code>wget -O ~/winbox_icon.png https://github.com/juanchixd/Mikrotik-linux/blob/main/icons/winbox-128x128.png?raw=true\n</code></pre> <p>Crear un enlace en nuestro escritorio:</p> <pre><code>cat &lt;&lt;'EOF' &gt; ~/Desktop/Winbox_Mikrotik.desktop\n[Desktop Entry]\nVersion=1.0\nEncoding=UTF-8\nName=Open Desktop\nName[en]=Winbox Mikrotik\nName[es]=Winbox Mikrotik\nName[es_ES]=Winbox Mikrotik\nExec=sh -c \"wine /home/isard/winbox.exe\"\nCategories=;\nType=Application\nTerminal=false\nIcon=/home/isard/winbox_icon.png\nEOF\n</code></pre> <p>Copiarlo en el directorio de autostart para que se ejecute en el arranque y verificamos que lo hace con un reboot.</p> <pre><code>cp -a ~/Desktop/Winbox_Mikrotik.desktop ~/.config/autostart/\nreboot\n</code></pre> <p>Podemos convertir en plantilla con nombre: \"cliente winbox vitalinux\"</p>"},{"location":"practicas/1.-router_mikrotik_y_alpine/#router-linux-basadao-en-alpine-linux","title":"Router linux basadao en alpine linux","text":""},{"location":"practicas/1.-router_mikrotik_y_alpine/#crear-plantilla-de-alpine-linux","title":"Crear plantilla de alpine linux","text":"<p>A partir de iso, vamos a la web de alpine y buscamos la versi\u00f3n standard para arquitectura x86:64. Copiamos la url y descargamos la iso en isard. En el momento de redactar esta gu\u00eda la direccion de descarga era: https://dl-cdn.alpinelinux.org/alpine/v3.19/releases/x86_64/alpine-standard-3.19.1-x86_64.iso</p> <p>Creamos escritorio basado en plantilla de hardware debian10 con 40GB de disco, 2vcpus y 1GB de memoria. Con una sola interface para crear la plantilla gen\u00e9rica.</p> <p>Para instalar iniciamos como usario root y no nos pide password</p> <p>Ejecutamos setup-alpine y configuramos todo el arranque.</p> <p>Ahora queremos preparar un script inicial para poder poner las reglas de firewall, rutas y dem\u00e1s acciones que queremos hacer cuando el router arranque. </p> <p>Hacemos un primer script en:</p> <pre><code>touch /usr/local/bin/startup_script.sh\nchmod u+x /usr/local/bin/startup_script.sh\n</code></pre> <p>El contenido del script puede ser;</p> <pre><code>#!/bin/bash\nip a s &gt;&gt; /tmp/log_ip.txt\n</code></pre> <p>Creamos el fichero de servicio:</p> <pre><code>touch /etc/init.d/router\nchmod u+x /etc/init.d/router\n</code></pre> <p>El contenido del fichero de servico:</p> <pre><code>#!/sbin/openrc-run\n\ndepend() {\nafter sshd\n}\n\nstart() {\nebegin \"router starting\"\n/usr/local/bin/startup_script.sh\n    eend $?\n}\n</code></pre> <p>Activamos el servicio:</p> <pre><code>rc-update add router default\n</code></pre> <p>Activamos el bit de forwarding:</p> <pre><code>echo \"net.ipv4.ip_forward = 1\" &gt;&gt; /etc/sysctl.conf\n</code></pre> <p>Podemos verificar si est\u00e1 activo despu\u00e9s de un reboot mirando:</p> <pre><code>cat /proc/sys/net/ipv4/ip_forward\n</code></pre> <p>A\u00f1adimos paquetes de redes:</p> <pre><code>apk add iptables iproute2 dnsmasq\n</code></pre> <p>Apagamos y creamos plantilla alpine redes v1</p>"},{"location":"practicas/1.-router_mikrotik_y_alpine/#configuracion-de-red-en-linux","title":"Configuraci\u00f3n de red en linux","text":"<p>A\u00f1adimos las redes de wireguard vpn y personal 1:</p> <ul> <li>eth0: default salida a internet (la ip la gestiona el sistema operativo)</li> <li>eth1: wireguard-vpn</li> <li>eth2: personal1</li> </ul> <p>Lo primero es poder configurar desde un terminal, para eso levantamos la interface eth1 y pedimos ip por dhcp para poderle entrar por ssh</p> <pre><code>ip link set eth1 up\nudhcpc -i eth1\nip r a 10.0.0.0/14 via 10.2.0.1\n</code></pre> <p>Ahora ya nos podemos conectar como usuario isard a la ip de la red de wireguard que tengamos (10.2.X.Y)</p> <pre><code>ssh isard@IP_DE_INTERFACE_WIREGUARD\n</code></pre> <p>Tambi\u00e9n podemos configurar /etc/ssh/sshd_config para permitir entrar como root, modificando la l\u00ednea:</p> <pre><code>PermitRootLogin yes\n</code></pre> <p>Editamos el script /usr/local/bin/startup_script.sh:</p> <pre><code>#!/bin/bash\n\n# CONFIGURAR IP VPN DE USUARIO ISARD\n# a\u00f1adiendo la ruta que el udhcpc no la a\u00f1ade por defecto\nip link set eth1 name vpnisard\nip link set vpnisard up\nudhcpc -i vpnisard\nip r a 10.0.0.0/14 via 10.2.0.1\n\n# CONFIGURAR IP LAN1\nip link set eth2 name lan1\nip link set lan1 up\nip a a 192.168.88.2/24 dev lan1\n\n# SERVIDOR DHCP\n# creamos fichero de configuraci\u00f3n\ncat &lt;&lt;'EOF' &gt; /etc/dnsmasq_router.conf\ninterface=lan1\ndhcp-range=192.168.88.20,192.168.88.99,255.255.255.0,24h\ndhcp-option=3,192.168.88.2\ndhcp-option=6,8.8.8.8,1.1.1.1\nEOF\n#lanzamos el servidor dnsmasq\ndnsmasq --conf-file=/etc/dnsmasq_router.conf\n\n# NAT MASQUERADE\niptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n</code></pre> <p>Una vez verificado con un cliente que todo funciona adecuadamente creamos plantilla router-mikrotik</p>"},{"location":"practicas/2.-raid/","title":"2. Pr\u00e1ctica de Raid","text":""},{"location":"practicas/2.-raid/#reducir-disco-de-maquina-virtual","title":"Reducir disco de m\u00e1quina virtual","text":"<ul> <li>Iniciamos con gparted/srcd i boot de cd</li> <li>Reducimos disco</li> <li>Paramos, editamos para arrancar de hard disk</li> </ul>"},{"location":"practicas/2.-raid/#raid-con-dos-particiones","title":"RAID con dos particiones","text":"<ul> <li> <p>Iniciamos y creamos dos particiones en el espacio libre de 1G cada una:</p> <p>fdisk /dev/vda</p> </li> </ul> <p></p> <ul> <li>n</li> <li>[enter] [enter] +1G</li> <li>[enter] [enter] +1G</li> <li> <p>w</p> <p>mdadm --create /dev/md0 --level=1 --raid-devices=2 /dev/vda5 /dev/vda6 cat /proc/mdstat mdadm --detail /dev/md0 wipefs /dev/vda5</p> </li> </ul> <p>Creamos sistema de ficheros XFS:</p> <pre><code>apt install xfsprogs\nmkfs.xfs /dev/md0\n</code></pre> <p>Comprobamos que todo ha ido bien haciendo el montaje:</p> <pre><code>mount -t xfs /dev/md0 /mnt\n</code></pre> <p>mount opciones m\u00e1s performance: <code>mount -o defaults,noatime,nodiratime,noquota</code></p> <p>NOTA: Si no 'guardamos' la configuraci\u00f3n del raid puede ser que al reiniciar nos cambie el nombre y nos dejar\u00e1 de funcionar el drbd porque no lo encontrar\u00e1.</p> <pre><code>mdadm --detail -scan &gt; /etc/mdadm/mdadm.conf\n\nupdate-initramfs -u\n</code></pre>"},{"location":"practicas/3.-drbd/","title":"3. DRBD","text":"<p>Sistema de r\u00e9plica en red de dispositivos de bloques (discos).</p> <p>Partimos de la pr\u00e1ctica de raid.</p>"},{"location":"practicas/3.-drbd/#anadir-red-escritorios","title":"A\u00f1adir red escritorios","text":"<p>Paramos, a\u00f1adimos red personal, arrancamos y configuramos IPs</p> <pre><code>NODO1: ip address add 10.0.0.1/24 dev enp2s0\nNODO2: ip address add 10.0.0.2/24 dev enp2s0\n</code></pre> <p>Comprobamos ping.</p>"},{"location":"practicas/3.-drbd/#desactivar-fw","title":"Desactivar fw","text":"<p>Para evitar problemas al iniciar la pr\u00e1ctica.</p> <p>systemctl disable --now ufw</p>"},{"location":"practicas/3.-drbd/#instalar-drbd","title":"Instalar DRBD","text":"<p>wget -O- https://packages.linbit.com/package-signing-pubkey.asc | apt-key add -</p> <p>PVERS=8 &amp;&amp; echo \"deb https://packages.linbit.com/proxmox/ proxmox-$PVERS drbd-9\" &gt;     /etc/apt/sources.list.d/linbit.list &amp;&amp; apt update -y &amp;&amp; apt install -y drbd-dkms drbd-utils drbd-doc&amp;&amp; dkms status</p>"},{"location":"practicas/3.-drbd/#configuracion-drbd","title":"Configuraci\u00f3n DRBD","text":"<p>Configuramos en los dos nodos en <code>/etc/drbd.d/storage.res</code>:</p> <pre><code>resource storage {\n    handlers {\n        fence-peer \"/usr/lib/drbd/crm-fence-peer.9.sh\";\n        unfence-peer \"/usr/lib/drbd/crm-unfence-peer.9.sh\";\n    }\n\n    options {\n        quorum off;\n    }\n\n    net {\n        #cram-hmac-alg     sha1;\n        #shared-secret     \"4XtZfDZHuU796UwYb31y\";\n        allow-two-primaries no;\n        fencing dont-care;\n        #fencing resource-and-stonith;\n\n        after-sb-0pri discard-zero-changes;\n        after-sb-1pri discard-secondary;\n        after-sb-2pri disconnect;\n    }\n\n    on server1 {\n        node-id 0;\n        address ipv4 10.0.0.1:7900;\n    volume 0 {\n        device minor 0;\n            disk /dev/md0;\n    }\n    }\n\n    on server2 {\n        node-id 1;\n        address ipv4 10.0.0.2:7900;\n    volume 0 {\n        device minor 0;\n            disk /dev/md0;\n    }\n    }\n\n    connection-mesh {\n                hosts server1 server2;\n        net {\n            protocol C;\n        }\n    }\n}\n</code></pre> <pre><code>drbdsetup status\n</code></pre>"},{"location":"practicas/3.-drbd/#activar-drbd","title":"Activar DRBD","text":"<p>Configuramos el nombre de servidor en /etc/hostname i ahora en caliente con <code>hostnamectl set-hostname server2</code></p> <p>En los dos nodos creamos los metadatos drbd en los discos y activamos el dispositivo de bloques de almacenamiento por red drbd:</p> <pre><code>wipefs -a /dev/md0\ndrbdadm create-md storage\ndrbdadm up storage\n</code></pre> <p>En uno de los nodos forzamos a que sea primario para empezar la sincronizaci\u00f3n:</p> <pre><code>drbdadm primary storage --force   #Solo en uno de los nodos\n</code></pre> <p>Comprobamos que va con <code>drbdadm status</code>.</p> <p>Creamos en el primario el sistema de ficheros y lo montamos en /dev/drbd0:</p> <pre><code>mkfs.xfs /dev/drbd0\nmount /dev/drbd0 /mnt\ntouch /mnt/DATOS\n</code></pre>"},{"location":"practicas/3.-drbd/#pruebas-manuales","title":"Pruebas manuales","text":"<p>Desmontamos /mnt y ponemos en secundario:</p> <pre><code>umount /mnt\ndrbdadm secondary storage\n</code></pre> <p>Vamos al otro nodo y hacemos el montaje (el drbd ya pone autom\u00e1ticamente el recurso en primario):</p> <pre><code>mount /dev/drbd0 /mnt\n</code></pre> <p>Comprobamos que est\u00e1 el fichero /mnt/DATOS en el nuevo nodo.</p>"},{"location":"practicas/4.-drbd-ha/","title":"4. DRBD HA","text":"<p>Partimos de la pr\u00e1ctica de drbd</p> <p>Para hacer el que el sistema est\u00e9 en alta disponibilidad tradicionamente se ha hecho con un <code>pacemaker</code> configurado en el cl\u00faster de nodos. La gente de DRBD ha visto que era muy complejo y que lo montaban mal y les repercutia en que se quejaban del DRBD, as\u00ed que crearon el drbd-reactor.</p> <pre><code>apt install -y drbd-reactor resource-agents resource-agents-extra\n</code></pre> <p>En /etc/drbd-reactor.d/storage.toml:</p> <pre><code>[[promoter]]\nid = \"storage\"\n[promoter.resources.storage]\nstart = [\n\"\"\"\nocf:heartbeat:Filesystem fs_mnt device=/dev/drbd0 \\\ndirectory=/mnt fstype=xfs run_fsck=no\"\"\" \n]\non-drbd-demote-failure = \"reboot\"\non-quorum-loss = \"freeze\"\n</code></pre> <p>En los dos nodos reiniciamos el servicio y comprobamos si va:</p> <pre><code>systemctl restart drbd-reactor\ndrbd-reactorctl status storage\n</code></pre> <p></p> <p></p> <p>Ahora probamos la alta disponibilidad forzando parada desde IsardVDI del nodo en d\u00f3nde tenemos montado el sistema mientras tenemos lanzado en el otro terminal para ver si lo monta al parar el otro nodo:</p> <pre><code>watch -n1 df -h\n</code></pre> <p>Deber\u00eda montarlo.</p>"},{"location":"practicas/4.-drbd-ha/#activar-firewall","title":"Activar firewall","text":"<p>En lugar de activar el firewall <code>ufw</code> de ubuntu, nosotros preferimos el <code>firewalld</code>:</p> <pre><code>apt install firewalld -y\nfirewall-cmd --list-all # veremos la interfaz p\u00fablica actual y como est\u00e1 configurada\n</code></pre> <p>NOTA: Es posible que nos haya activado ya el servicio de firewall con lo cual el servicio de DRBD es posible que ya nos diga que se ha desconectado.</p> <p>Pasamos a abrir el puerto 7900 del DRBD en el firewall. Para ello crearemos una nueva zona para la red de drbd i activaremos el firewalld en esa zona para permitir el puerto solo para las IPs de la 10.0.0.0/24:</p> <pre><code>firewall-cmd --new-zone=drbd --permanent\nfirewall-cmd --reload\nfirewall-cmd --zone=drbd --add-source=10.0.0.0/24 --permanent\nfirewall-cmd --zone=drbd --add-port=7900/tcp --permanent\nfirewall-cmd --reload\n</code></pre>"},{"location":"practicas/5.-qcows/","title":"5. Modificar cadena en qcow","text":""},{"location":"practicas/5.-qcows/#desconectar-con-qemu-img-convert-isard-storage","title":"Desconectar con qemu-img convert (isard-storage)","text":"<pre><code>root@titan:/opt/isard/templates# ls -lh\ntotal 56G\n-rw-r--r-- 1 root root 413M nov 30 01:12 0985c786-bf31-44af-b319-9032ab0821ac.qcow2\n-rw-r--r-- 1 root root  14G nov 30 02:01 1efaca48-ad71-4ae2-8521-dd84777dd192.qcow2\n-rw-r--r-- 1 root root 5,2G nov 30 14:52 827ee630-09b0-4655-8da9-91edf53e838f.qcow2\n-rw-r--r-- 1 root root  10G nov 30 14:53 8f709a44-0b3c-4c51-b8ff-89c1dac0ca58.qcow2\n-rw-r--r-- 1 root root  28G nov 30 01:45 de5d3d2c-3c64-4879-9e7d-1ed47946689a.qcow2\nroot@titan:/opt/isard/templates# qemu-img info 827ee630-09b0-4655-8da9-91edf53e838f.qcow2 \nimage: 827ee630-09b0-4655-8da9-91edf53e838f.qcow2\nfile format: qcow2\nvirtual size: 100 GiB (107374182400 bytes)\ndisk size: 4.01 GiB\ncluster_size: 4096\nbacking file: /isard/templates/1efaca48-ad71-4ae2-8521-dd84777dd192.qcow2\nbacking file format: qcow2\nFormat specific information:\n    compat: 1.1\n    compression type: zlib\n    lazy refcounts: false\n    refcount bits: 16\n    corrupt: false\n    extended l2: false\nroot@titan:/opt/isard/templates# qemu-img convert -f qcow2 -O qcow2 1efaca48-ad71-4ae2-8521-dd84777dd192.qcow2 result.qcow2\nroot@titan:/opt/isard/templates# ls -lh\ntotal 69G\n-rw-r--r-- 1 root root 413M nov 30 01:12 0985c786-bf31-44af-b319-9032ab0821ac.qcow2\n-rw-r--r-- 1 root root  14G nov 30 02:01 1efaca48-ad71-4ae2-8521-dd84777dd192.qcow2\n-rw-r--r-- 1 root root 5,2G nov 30 14:52 827ee630-09b0-4655-8da9-91edf53e838f.qcow2\n-rw-r--r-- 1 root root  10G nov 30 14:53 8f709a44-0b3c-4c51-b8ff-89c1dac0ca58.qcow2\n-rw-r--r-- 1 root root  28G nov 30 01:45 de5d3d2c-3c64-4879-9e7d-1ed47946689a.qcow2\n-rw-r--r-- 1 root root  14G may  9 09:05 result.qcow2\nroot@titan:/opt/isard/templates# qemu-img info result.qcow2 \nimage: result.qcow2\nfile format: qcow2\nvirtual size: 100 GiB (107374182400 bytes)\ndisk size: 13.4 GiB\ncluster_size: 65536\nFormat specific information:\n    compat: 1.1\n    compression type: zlib\n    lazy refcounts: false\n    refcount bits: 16\n    corrupt: false\n    extended l2: false\n</code></pre>"},{"location":"practicas/5.-qcows/#desconectar-con-virsh-blockpull-isard-hypervisor","title":"Desconectar con virsh blockpull (isard-hypervisor)","text":"<p>Quitarle la backing-chain. Funciona con una plantilla y con un desktop (deben estar parados).</p> <ul> <li>https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/virtualization_administration_guide/sub-sect-domain_commands-using_blockpull_to_shorten_a_backing_chain</li> </ul> <p>NOTA: Este proceso requiere parar isard-engine ya que se debe arrancar un dominio en paused y isard-engine lo va a parar si lo ve.</p> <ol> <li>Guardar el ID del disco de la plantilla a desconectar del apartado <code>Almacenamiento</code>. Tambi\u00e9n se puede consultar en el detalle de la plantilla en el apartado de <code>Templates</code> de administraci\u00f3n. Tiene el formato de UUID <code>5ee80dab-1e80-4687-839c-00c9803591c0</code>.</li> <li>Quitar de la cadena dependiente este disco ()</li> </ol> <p>Ejemplo: creamos derivate.qcow2 para pasarle toda la cadena luego:</p> <pre><code>qemu-img create -F qcow2 -f qcow2 -b /isard/templates/827ee630-09b0-4655-8da9-91edf53e838f.qcow2 derivate.qcow2\n\nroot@6200de668122:/isard/templates/test# ls -lh ../827ee630-09b0-4655-8da9-91edf53e838f.qcow2 \n-rw-r--r-- 1 root root 5.2G Nov 30 14:52 ../827ee630-09b0-4655-8da9-91edf53e838f.qcow2\nroot@6200de668122:/isard/templates/test# ls -lh\ntotal 196K\n-rw-r--r-- 1 root root 194K May  9 15:29 derivate.qcow2\n\nroot@6200de668122:/isard/templates/test# qemu-img info derivate.qcow2 \nimage: derivate.qcow2\nfile format: qcow2\nvirtual size: 100 GiB (107374182400 bytes)\ndisk size: 196 KiB\ncluster_size: 65536\nbacking file: /isard/templates/827ee630-09b0-4655-8da9-91edf53e838f.qcow2\nbacking file format: qcow2\nFormat specific information:\n    compat: 1.1\n    compression type: zlib\n    lazy refcounts: false\n    refcount bits: 16\n    corrupt: false\n    extended l2: false\n</code></pre> <p>Creamos xml de dominio con el path del disco derivate.qcow2:</p> <pre><code>&lt;domain type=\"kvm\"&gt;\n  &lt;name&gt;domain&lt;/name&gt;\n  &lt;memory unit=\"M\"&gt;768&lt;/memory&gt;\n  &lt;vcpu placement=\"static\"&gt;2&lt;/vcpu&gt;\n  &lt;os&gt;\n    &lt;type arch=\"x86_64\" machine=\"q35\"&gt;hvm&lt;/type&gt;\n  &lt;/os&gt;\n  &lt;devices&gt;\n    &lt;emulator&gt;/usr/bin/qemu-kvm&lt;/emulator&gt;\n    &lt;disk type='file' device='disk'&gt;\n      &lt;driver name='qemu' type='qcow2' cache='unsafe' discard='unmap'/&gt;\n      &lt;source file='/isard/templates/test/derivate.qcow2' index='1'/&gt;\n      &lt;target dev='vda' bus='virtio'/&gt;\n      &lt;alias name='virtio-disk0'/&gt;\n      &lt;address type='pci' domain='0x0000' bus='0x05' slot='0x00' function='0x0'/&gt;\n    &lt;/disk&gt;\n  &lt;/devices&gt;\n&lt;/domain&gt;\n</code></pre> <pre><code>virsh create derivate.xml --paused\n\nroot@6200de668122:/isard/templates/test# virsh list\nAuthorization not available. Check if polkit service is running or see debug message for more information.\nId   Name     State\n-----------------------\n3    domain   paused\n\nroot@6200de668122:/isard/templates/test# virsh blockpull --domain domain --path /isard/templates/test/derivate.qcow2 --verbose --wait\nAuthorization not available. Check if polkit service is running or see debug message for more information.\nBlock Pull: [100 %]\nPull complete\nroot@6200de668122:/isard/templates/test# ls -lh\ntotal 17G\n-rw-r--r-- 1 root root 17G May  9 16:02 derivate.qcow2\n\nvirsh destroy domain\n</code></pre> <p>Comprobamos que ya no tiene <code>backing chain</code> (est\u00e1 desconectado de la cadena):</p> <pre><code>root@6200de668122:/isard/templates/test# qemu-img info derivate.qcow2 \nimage: derivate.qcow2\nfile format: qcow2\nvirtual size: 100 GiB (107374182400 bytes)\ndisk size: 16.8 GiB\ncluster_size: 65536\nFormat specific information:\n    compat: 1.1\n    compression type: zlib\n    lazy refcounts: false\n    refcount bits: 16\n    corrupt: false\n    extended l2: false\n</code></pre>"},{"location":"practicas/6.-ova/","title":"6. Conversi\u00f3n de formatos","text":""},{"location":"practicas/6.-ova/#vmware-ova","title":"VMWare ova","text":""},{"location":"practicas/6.-ova/#virt-v2v-ova-to-qcowxml-no-recomendado","title":"virt-v2v OVA to qcow/xml (NO RECOMENDADO)","text":"<p>No recomendado: Hay que hacerlo en el contenedor isard-hypervisor, instalando: apt install virt-v2v -y NOTA: Mejor usar <code>qemu-img convert</code></p> <pre><code>root@6200de668122:/isard/groups/tmp# ls\njammy-server-cloudimg-amd64.ova\nroot@6200de668122:/isard/groups/tmp# virt-v2v -i ova jammy-server-cloudimg-amd64.ova -o local -os . -of qcow2\n[   0.0] Opening the source -i ova jammy-server-cloudimg-amd64.ova\n[   1.8] Creating an overlay to protect the source from being modified\n[   1.9] Opening the overlay\n[   3.0] Inspecting the overlay\n[   4.4] Checking for sufficient free disk space in the guest\n[   4.4] Estimating space required on target for each disk\n[   4.4] Converting Ubuntu 22.04.4 LTS to run on KVM\nvirt-v2v: warning: could not determine a way to update the configuration of \nGrub2\nvirt-v2v: This guest has virtio drivers installed.\n[   9.5] Mapping filesystem data to avoid copying unused and blank areas\n[  10.3] Closing the overlay\n[  10.5] Assigning disks to buses\n[  10.5] Checking if the guest needs BIOS or UEFI to boot\n[  10.5] Initializing the target -o local -os .\n[  10.5] Copying disk 1/1 to ./ubuntu-jammy-22.04-cloudimg-20240426-sda (qcow2)\n    (100.00/100%)\n[  14.5] Creating output metadata\n[  14.5] Finishing off\nroot@6200de668122:/isard/groups/tmp# ls -l\ntotal 2194072\n-rw-r--r-- 1 root root  628244480 Apr 26 12:06 jammy-server-cloudimg-amd64.ova\n-rw-r--r-- 1 root root 1618477056 May  9 09:49 ubuntu-jammy-22.04-cloudimg-20240426-sda\n-rw-r--r-- 1 root root       1732 May  9 09:49 ubuntu-jammy-22.04-cloudimg-20240426.xml\n</code></pre> <p>El problema es que el xml igualmente no nos sirve</p>"},{"location":"practicas/6.-ova/#qemu-img-convert-vmdk-to-qcow","title":"qemu-img convert vmdk to qcow","text":"<p>Algunas im\u00e1genes descargables para pruebas:</p> <ul> <li>https://www.osboxes.org/virtualbox-images/</li> <li> <p>https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.ova</p> <p>root@titan:/opt/isard/groups# wget https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.ova</p> <p>root@titan:/opt/isard/groups# tar xvf jammy-server-cloudimg-amd64.ova  ubuntu-jammy-22.04-cloudimg.ovf ubuntu-jammy-22.04-cloudimg.mf ubuntu-jammy-22.04-cloudimg.vmdk root@titan:/opt/isard/groups# file ubuntu-jammy-22.04-cloudimg.vmdk  ubuntu-jammy-22.04-cloudimg.vmdk: VMware4 disk image</p> <p>root@titan:/opt/isard/groups# qemu-img convert -O qcow2 ubuntu-jammy-22.04-cloudimg.vmdk ubuntu-jammy-22.04-cloudimg.qcow2 root@titan:/opt/isard/groups# qemu-img info ubuntu-jammy-22.04-cloudimg.qcow2 image: ubuntu-jammy-22.04-cloudimg.qcow2 file format: qcow2 virtual size: 10 GiB (10737418240 bytes) disk size: 1.48 GiB cluster_size: 65536 Format specific information:     compat: 1.1     compression type: zlib     lazy refcounts: false     refcount bits: 16     corrupt: false     extended l2: false</p> </li> </ul>"},{"location":"practicas/6.-ova/#anadir-a-isard-desktoptemplate-de-vmdk","title":"A\u00f1adir a Isard desktop/template de vmdk","text":"<ol> <li>Crear escritorio a partir de cualquier ISO en el apartado <code>Medios</code>. Seleccionar la configuraci\u00f3n deseada para la m\u00e1quina destino. No iniciar este escritorio.</li> <li>Guardar el ID del disco de este nuevo escritorio del apartado <code>Almacenamiento</code>. Tiene el formato de UUID <code>5ee80dab-1e80-4687-839c-00c9803591c0</code>.</li> <li>Subir el disco <code>disco-vmware.vmdk</code> del fichero <code>ova</code> (extraer vmdk con <code>tar xvf maquina-vmware.ova</code>) al directorio <code>/opt/isard/groups/</code> del servidor.</li> <li>Convertir el disco vmdk sobre el existente del escritorio que hemos creado: <code>docker exec isard-storage qemu-img convert -O qcow2 /isard/groups/disco-vmware.vmdk /isard/groups/5ee80dab-1e80-4687-839c-00c9803591c0.qcow2</code>, sustituyendo el UUID del ejemplo por el real del disco de nuestro escritorio, del apartado 2.</li> <li>Editar el escritorio y cambiar el arranque de CD/DVD a Disco duro e iniciar.</li> </ol>"},{"location":"practicas/7.-clonar_ova/","title":"7. Clonar una ova o qcow en un escritorio Isard","text":"<p>Para importar un disco de una ova, un qcow o un fichero proveniente de un clonado, necesitaremos dos escritorios:</p> <ul> <li> <p>Un escritorio donde almacenar estos ficheros donde correr\u00e1 un servidor NFS, accesible desde otros escritorios como fuente de clonaci\u00f3n. </p> </li> <li> <p>Un segundo escritorio con un CD de \"rescate\" o \"instalaci\u00f3n\" donde poder clonar el contenido del disco qcow/img/vmdk que est\u00e1 en el servidor NFS en el disco del escritorio. Posteriormente cambiaremos el tipo de arranque de ISO a disco duro para que arranque con el disco clonado.</p> </li> </ul>"},{"location":"practicas/7.-clonar_ova/#escritorio-donde-clonar","title":"Escritorio donde clonar","text":"<p>Descargamos una iso de una distribuci\u00f3n que tenga en su cat\u00e1logo de paquetes todas las herramientas de virtualizaci\u00f3n. En este caso usaremos Fedora (https://fedoraproject.org/es/workstation/download). Seleccionaremos la url de descarga y creamos la iso desde Medios:</p> <p></p> <p>En el apartado de Medios descargamos la iso y creamos un escritorio basado en esta iso </p> <p></p> <p>Hemos seleccionado un disco duro generoso en tama\u00f1o (80GB). Pero podemos adecuar el tama\u00f1o a algo inferior si ya sabemos que no se va a usar tanto en un futuro. Tambi\u00e9n los administradores de Isard pueden recrecer un disco previamente creado.</p> <p>Escogemos un perfil de hardware adecuado para el sistema operativo que querramos clonar. En este caso he seleccionado uno bastante gen\u00e9rico, por ejemplo: debian 10.</p> <p>A\u00f1adiremos las siguientes redes y en el siguiente orden:</p> <ul> <li> <p>Default: para poder salir a internet a instalar nuevos paquetes</p> </li> <li> <p>Wireguard VPN: por si queremos subir la iso directamente desde nuestro PC o comunicarnos via ssh usando ls VPN personal</p> </li> <li> <p>Personal1: para podernos comunicar con el servidor NFS siguado en esta misma red personal</p> </li> </ul> <p></p>"},{"location":"practicas/7.-clonar_ova/#escritorio-que-hara-de-servidor-nfs","title":"Escritorio que har\u00e1 de servidor NFS","text":"<p>Vamos a crear un escritorio basado en alpine, una distribuci\u00f3n muy ligera de linux, para montar el servidor NFS.</p> <p>Si el sistema no dispone de una iso de alpine, descargamos una iso de alpine y creamos un escritorio basado en esta iso.</p> <p>Es importante ponerle un disco de tama\u00f1o generoso por si tenemos que ir a\u00f1adiendo ficheros al servidor. En este caso de 120GB. </p> <p>A\u00f1adimos la red Personal1 para que se pueda comunicar con el otro escritorio.</p> <p></p> <p>Procedemos a realizar la instalaci\u00f3n de Alpine:</p> <p></p> <p>En la parte de seleccion de redes, en la red personal nos pondremo una ip privada:</p> <ul> <li> <p>eth0: dhcp</p> </li> <li> <p>eth1: 192.168.99.10/24</p> </li> </ul> <p></p> <p>Como password de root seguimos poniendo el password habitual: \"pirineus\".</p> <p>Continuamos la instalaci\u00f3n escogiendo la zona horaria, mirror, no creamos usuarios, permitimos que por ssh te puedas conectar como root</p> <p></p> <p>Seleccionamos el disco y finaliza la instalaci\u00f3n, hacemos un \"poweroff\" al final para poder cambiar el dispositivo de arranque al disco duro con el escritorio apagado:</p> <p></p> <p>Editamos el escritorio cambiando el dispositivo de arranque y eliminando la iso como medio:</p> <p></p> <p></p> <p>Para no tener que reproducir estos pasos, podemos aprovechar el trabajo hecho para crear una plantilla con el nombre de la versi\u00f3n de alpine y algunas a\u00f1adir en la descripci\u00f3n algunas caracter\u00edsticas como tama\u00f1o de disco y redes para poderla identificar correctamente cuando busquemos entre las plantillas. </p> <ul> <li> <p>nombre: \"alpine 3.20.1\"</p> </li> <li> <p>descripci\u00f3n: \"USER: root / PWD: pirineus - Alpine 3.20 recien instalado con red default y personal en 192.168.99.10, disco de 120GB\"</p> </li> <li> <p>permisos: cualquier usuario de mi categoria</p> </li> </ul> <p></p> <p></p> <p>El escritorio Serviodr NFS est\u00e1 ahora basado en la plantilla \"alpine 3.20.1\"</p>"},{"location":"practicas/7.-clonar_ova/#_1","title":"7. Clonar una ova o qcow en un escritorio Isard","text":"<p>Para crear el servidor nfs seguimos la gu\u00eda de la wiki de alpine (https://wiki.alpinelinux.org/wiki/Setting_up_an_NFS_server)</p> <p>Ejecutamos las siguientes \u00f3rdenes:</p> <pre><code>apk add nfs-utils iproute2\n\nmkdir -p /export/shared\n\necho \"/export/shared *(rw,sync,no_root_squash)\" &gt; /etc/exports\n\nrc-update add nfs\n</code></pre> <p>Hacemos un reboot para asegurarnos que el servicio arranca y verificamos que el servicio de nfs est\u00e1 escuchando en los puertos asociados a este servicio:</p> <pre><code>ss -tlnp |grep -E \"111|2049\"\n</code></pre> <p>Verificamos que est\u00e1 exportando bien:</p> <pre><code>nfs-server:~# exportfs -v\n\n/export/shared  &lt;world&gt;(sync,wdelay,hide,no_subtree_check,sec=sys,rw,secure,no_root_squash,no_all_squash)\n</code></pre>"},{"location":"practicas/7.-clonar_ova/#conectar-escritorio-con-servidor-nfs","title":"Conectar escritorio con servidor nfs","text":"<p>Arrancamos los dos escritorios:</p> <p></p> <p>Desde Fedora Live iniciamos sin esperar a testear el medio:</p> <p></p> <p>Una vez arrancado, le decimos que no queremos instalar Fedora</p> <p></p> <p>Configuramos la ip fija, para hacerlo con la interface gr\u00e1fica:</p> <p></p> <p></p> <p>Si queremos tambi\u00e9n podemos cambiar la distribuci\u00f3n del teclado:</p> <p></p> <p>Desde la inteface gr\u00e1fica de fedora podemos usar el portapapeles. Abrimos una terminal y podemos copiar y pegar el siguiente comando para hacer un ping que podemos hacer ping :</p> <pre><code>ping -c 1 192.168.99.10\n</code></pre> <p>Nos responde que hay comunicaci\u00f3n:</p> <pre><code>1 packets transmitted, 1 received, 0% packet loss, time 0ms\n</code></pre> <p>Creamos una carpeta y montamos por nfs:</p> <pre><code>sudo mkdir /mnt/nfs\n\nsudo mount -t nfs4 192.168.99.10:/export/shared /mnt/nfs\n</code></pre> <p>Verificmaos que ha montado bien:</p> <pre><code>liveuser@localhost-live:~$ mount |grep nfs\n\nrpc_pipefs on /var/lib/nfs/rpc_pipefs type rpc_pipefs (rw,relatime)\n\n192.168.99.10:/export/shared on /mnt/nfs type nfs4 (rw,relatime,vers=4.2,rsize=131072,wsize=131072,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,clientaddr=192.168.99.20,local_lock=none,addr=192.168.99.10)\n</code></pre>"},{"location":"practicas/7.-clonar_ova/#clonar-disco-duro-a-partir-de-una-ova","title":"Clonar disco duro a partir de una ova","text":"<p>Como ejemplo tenemos una ova de wazuh (https://documentation.wazuh.com/current/deployment-options/virtual-machine/virtual-machine.html)</p> <p>Desde fedora descargamos la ova en el directorio montado por nfs:</p> <pre><code>cd /mnt/nfs\n\nsudo wget https://packages.wazuh.com/4.x/vm/wazuh-4.8.0.ova\n</code></pre> <p>Podemos usar las utilidades de qmeu para montar:</p> <pre><code>sudo dnf install qemu-tools-y  \n\nsudo modprobe nbd\n\nsudo tar xvf wazuh-4.8.0.ova\n\nsudo qemu-nbd --connect=/dev/nbd0 /mnt/nfs/wazuh-4.8.0-disk-1.vmdk\n</code></pre> <p>Verificamos que ha montado:</p> <pre><code>liveuser@localhost-live:/mnt/nfs$ lsblk /dev/nbd0\n\nNAME       MAJ:MIN RM SIZE RO TYPE MOUNTPOINTS\n\nnbd0        43:0    0  50G  0 disk \n\n\u251c\u2500nbd0p1    43:1    0  50G  0 part \n\n\u2514\u2500nbd0p128 259:1    0   1M  0 part \n</code></pre> <p>Y clonamos con dd en bloques de 4M y mostrando el progreso:</p> <pre><code>sudo dd if=/dev/nbd0 of=/dev/vda bs=4M status=progress\n</code></pre> <p>Una vez ha finalizado, apagamos el escritorio de fedora y modificamos el escritorio:</p> <ul> <li> <p>le cambiamos el nombre por wazuh</p> </li> <li> <p>quitamos iso de fedora</p> </li> <li> <p>cambiamos para que arranque desde disco duro</p> </li> <li> <p>cambiamos el bus a SATA (es m\u00e1s est\u00e1ndar que usar bus VIRTIO)</p> </li> <li> <p>dejamos s\u00f3lo las redes que nos interesan para ese desktop</p> </li> <li> <p>subimos la ram hasta 8GB (lo recomienda wazuh)</p> </li> </ul> <p>Conseguimos arrancar la m\u00e1quina. Aunque se queja de que no encuentra algunos dispositivos de virtual box como la tarjeta de v\u00eddeo, eso no le impiede arrancar y funcionar correctamente usando la VGA Default.</p> <p>Una vez ha arrancado podemos iniciar sesi\u00f3n con:</p> <ul> <li> <p>user: wazuh-user</p> </li> <li> <p>pwd: wazuh</p> </li> </ul> <p>Cambiamos el teclado a espa\u00f1ol:</p> <pre><code>sudo loadkeys es\n</code></pre> <p>A\u00f1adir una ip manualmente:</p> <pre><code>sudo ip link set eth2 up\n\nsudo ip a a 192.168.99.30/24 dev eth2\n</code></pre> <p>Creamos un escritorio por ejemplo basado en ubuntu 22.04, a\u00f1adiendo la red personal1, y configur\u00e1ndola con una ip de la familia 192.168.99.0/24.</p> <p>Verificamos que wazuh se est\u00e1 ejecutando accediendo v\u00eda web, y tambi\u00e9n podemos acceder v\u00eda ssh como se aprecia en ls siguiente captura de pantalla:</p> <p></p>"},{"location":"practicas/7.-clonar_ova/#troubleshooting","title":"Troubleshooting","text":"<p>Es recomendable cambiar al bus SATA en la mayor\u00eda de OVAs, y posteriormente probar si tambi\u00e9n reconoce el disco con el bus VIRTIO.</p> <p>Si se trata de un windows o un sistema operativo muy antiguo, puede que no detecte las tarjetas de red tipo virtio hasta que instalemos los drivers. Cambiando por una red con tarjeta \"intel\" o \"Realtek\" ha de ser compatible. </p>"},{"location":"practicas/8.-postgres-cliente-servidor/","title":"8. Servidor de PostgreSQL compartido con alumnos","text":"<p>Servidor de base de datos compartido con alumnos para una pr\u00e1ctica de PostgreSQL en un servidor de Isard sin configuraciones de red.</p>"},{"location":"practicas/8.-postgres-cliente-servidor/#escenario","title":"Escenario:","text":"<pre><code>                     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \n\n                     \u2502                        \u2502                    \n\n                     \u2502 ROUTER SALIDA DEFAULT  \u2502                    \n\n                     \u2502                        \u2502                    \n\n                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \n\n                                  \u2502.1                              \n\n          \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \n\n          \u2502                       \u2502                        \u2502       \n\n          \u2502   192.168.120.0/22    \u2502                        \u2502       \n\n \u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      \u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500     \u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n      \u2502   default              \u2502                       \u2502           \n\n      \u2502                        \u2502                       \u2502           \n\n \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u250c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \n\n \u2502              \u2502          \u2502              \u2502      \u2502              \u2502  \n\n \u2502 servidor     \u2502          \u2502  cliente1    \u2502      \u2502 cliente2     \u2502  \n\n \u2502              \u2502          \u2502  ubuntu      \u2502      \u2502 ubuntu       \u2502  \n\n \u2502 postgres     \u2502          \u2502  postgres    \u2502      \u2502 postgres     \u2502  \n\n \u2502              \u2502          \u2502              \u2502      \u2502              \u2502  \n\n \u2502              \u2502          \u2502              \u2502      \u2502              \u2502  \n\n \u2502              \u2502          \u2502              \u2502      \u2502              \u2502  \n\n \u2502              \u2502          \u2502              \u2502      \u2502              \u2502  \n\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \n\n        \u2502.20                      \u2502dhcp                 \u2502dhcp      \n\n        \u2502                         \u2502                     \u2502          \n\n        \u2502                         \u2502                     \u2502          \n\n        \u2502     192.168.222.0/24    \u2502                     \u2502          \n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n               \u2502         red de grupo: grupo_bbdd                  \n\n               \u2502                                                   \n\n               \u2502.10                                                \n\n       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                           \n\n       \u2502               \u2502                                           \n\n       \u2502               \u2502                                           \n\n       \u2502  servidor     \u2502                                           \n\n       \u2502  DHCP         \u2502                                           \n\n       \u2502  alpine       \u2502                                           \n\n       \u2502               \u2502                                           \n\n       \u2502               \u2502                                           \n\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                           \n</code></pre>"},{"location":"practicas/8.-postgres-cliente-servidor/#crear-recursos-y-usuarios-en-isard","title":"Crear recursos y usuarios en Isard","text":"<p>Si no tenemos un grupo de alumno hay que crearlo:</p> <p>Crear grupo:</p> <p></p> <p>Vamos a usar una red de grupo, que ha de ser visible tambi\u00e9n por los alumnos. </p> <p></p> <p>Compartirla con los alumnos. Buscamos la red y le damos al bot\u00f3n de las \"personitas\":</p> <p></p> <p></p>"},{"location":"practicas/8.-postgres-cliente-servidor/#escritorio-servidor-postgres","title":"Escritorio servidor postgres","text":"<p>Seleccionar una plantilla base: debian_11.6</p> <p></p> <p>Seleccionar las redes y visores:</p> <ul> <li> <p>Default: necesitamos salir a Internet para instalar paquetes</p> </li> <li> <p>Grupo: red de grupo, recordamos que no tiene servidor DHCP</p> </li> </ul> <p></p> <p>Creamos el escritorio y lo arrancamos. Nos conectamos por el visor spice porque nos permitir\u00e1 copiar y pegar comandos desde mi sistema operativo de mi m\u00e1quina f\u00edsica al escritorio.</p>"},{"location":"practicas/8.-postgres-cliente-servidor/#configuraciones-de-los-nombres-de-las-interfaces-de-red","title":"Configuraciones de los nombres de las interfaces de red","text":"<p>Arrancamos una consola dentro del escritorio y ejectuamos las siguientes \u00f3rdenes:</p> <pre><code>sudo bash -c 'cat &gt; /etc/udev/rules.d/70-persistent-net.rules &lt;&lt; EOF\n\nSUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{type}==\"1\", KERNEL==\"enp1s0\", NAME=\"inet\"\n\nSUBSYSTEM==\"net\", ACTION==\"add\", DRIVERS==\"?*\", ATTR{type}==\"1\", KERNEL==\"enp2s0\", NAME=\"grupo\"\n\nEOF'\n</code></pre>"},{"location":"practicas/8.-postgres-cliente-servidor/#servidor-dhcp-con-alpine-linux","title":"Servidor DHCP con Alpine Linux","text":""},{"location":"practicas/8.-postgres-cliente-servidor/#crear-plantilla-alpine-base","title":"Crear plantilla alpine base","text":"<ol> <li> <p>Descagamos la iso de instalaci\u00f3n Alpine-Standar</p> </li> <li> <p>Si no nos funciona la url de descarga podemos usar https://isos.isardvdi.com o buscar otro sitio de descarga: https://dl-cdn.alpinelinux.org/alpine/latest-stable/releases/x86_64/</p> </li> <li> <p>Creamos escritorio a partir de iso: </p> </li> <li> <p>0.5GB de ram</p> </li> <li> <p>2 cpus, red default para poder instalar</p> </li> <li> <p>plantilla de hardware: alpine 3.16 (la \u00faltima que haya disponible)</p> </li> <li> <p>Hacemos la instalaci\u00f3n del sistema operativo</p> </li> <li> <p>Actualizamos paquetes y shutdown</p> </li> </ol> <pre><code>apk update\n\napk upgrade\n\npoweroff\n</code></pre> <ol> <li> <p>Convertimos el escritorio en plantilla para tener una plantilla de alpine \"base\".</p> </li> <li> <p>Quitar la iso de la plantilla</p> </li> <li> <p>Boot: Hard disk</p> </li> <li> <p>Que s\u00f3lo tenga la red Default</p> </li> <li> <p>Asegurarte que est\u00e1 la plantilla habilitada y con los permisos necesarios. Lo puedes modificar en el listado de plantillas en los botones de \"ojo\" y \"personitas\":</p> </li> </ol> <p></p> <p></p>"},{"location":"practicas/8.-postgres-cliente-servidor/#conectar-por-ssh-al-router-desde-un-escritorio-grafico-para-usar-el-portapapeles","title":"Conectar por ssh al router desde un escritorio gr\u00e1fico para usar el portapapeles","text":"<ol> <li> <p>Vuelvo a arrancar el escritorio, que ahora depende de esta plantilla que acabamos de crear. Me aseguro de tener la red de grupo conectada.</p> </li> <li> <p>Quiero tener acceso por una consola donde pueda copiar/pegar comandos. Lo m\u00e1s sencillo es desde un escritorio con entorno gr\u00e1fico donde con el cliente spice puedo copiar y pegar, conectarme con una ip fija via ssh.</p> </li> <li> <p>En el servidor dhcp nos ponemos una ip en la segunda interface:</p> </li> </ol> <pre><code>ip link set eth1 up \n\nip a a 192.168.222.10/24\n\nip a a 192.168.222.10/24 dev eth1\n</code></pre> <p>Creamos un cliente basado en fedora. </p> <ul> <li>En el cliente nos ponemos otra ip de la misma familia</li> </ul> <pre><code>[isard@fedora ~]$ sudo systemctl stop NetworkManager.service \n\n[isard@fedora ~]$ sudo ip a a 192.168.222.20/24 dev enp2s0\n\n[isard@fedora ~]$ ping -c 1 192.168.222.10\n\nPING 192.168.222.10 (192.168.222.10) 56(84) bytes of data.\n\n64 bytes from 192.168.222.10: icmp_seq=1 ttl=64 time=3.84 ms\n\n\n\n--- 192.168.222.10 ping statistics ---\n\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\n\nrtt min/avg/max/mdev = 3.844/3.844/3.844/0.000 ms\n</code></pre> <p>Y nos conectamos v\u00eda ssh</p>"},{"location":"practicas/8.-postgres-cliente-servidor/#crear-plantilla-alpine-redes","title":"Crear plantilla alpine-redes","text":"<p>Ahora queremos dejar una plantilla de alpine lista para trabajar con redes, con un script inicial que se ejecutar\u00e1 y donde los alumnos podr\u00e1n ir introduciendo \u00f3rdenes b\u00e1sicas de linux para confiurar interfaces, iptables.</p> <p>La idea es tener una plantilla donde practicar con los comandos b\u00e1sicos de linux que se ejecutar\u00e1n cuando arranque la m\u00e1quina.</p> <p>Creamos el script y le damos permisos</p> <pre><code>touch /usr/local/bin/startup_script.sh\n\nchmod u+x /usr/local/bin/startup_script.sh\n</code></pre> <p>Instalamos la shell bash:</p> <pre><code>apk add bash\n</code></pre> <p>Activamos el bit de forwarding para el siguiente inicio:</p> <pre><code>#activar bit de forwarding para que pueda funcionar como router\n\necho \"net.ipv4.ip_forward = 1\" &gt;&gt; /etc/sysctl.conf\n</code></pre> <p>El contenido del script puede ser;</p> <pre><code>#!/bin/bash\n\n\n\nip a s &gt;&gt; /tmp/log_ip.txt\n</code></pre> <p>Creamos el fichero de servicio:</p> <pre><code>touch /etc/init.d/router\n\nchmod u+x /etc/init.d/router\n</code></pre> <p>El contenido del fichero de servico:</p> <pre><code>#!/sbin/openrc-run\n\n\n\ndepend() {\n\nafter sshd\n\n}\n\n\n\nstart() {\n\nebegin \"router starting\"\n\n/usr/local/bin/startup_script.sh\n\n    eend $?\n\n}\n</code></pre> <p>Activamos el servicio:</p> <pre><code>rc-update add router default\n</code></pre> <p>Hacemos reboot y podemos verificar si est\u00e1 activo despu\u00e9s de un reboot mirando:</p> <pre><code>cat /proc/sys/net/ipv4/ip_forward\n</code></pre> <p>A\u00f1adimos paquetes de redes:</p> <pre><code>apk add iptables iproute2 dnsmasq\n</code></pre> <p>Apagamos y creamos plantilla alpine redes v1</p>"},{"location":"practicas/8.-postgres-cliente-servidor/#crear-servidor-dhcp","title":"Crear servidor DHCP","text":"<p>Desconectamos la red default, nos quedaremos s\u00f3lo con una interface de grupo.</p> <p>Ejecutamos el setup de interfaces de alpine:</p> <pre><code>dhcp-server:~# setup-interfaces \n\nAvailable interfaces are: eth0.\n\nEnter '?' for help on bridges, bonding and vlans.\n\nWhich one do you want to initialize? (or '?' or 'done') [eth0] \n\nIp address for eth0? (or 'dhcp', 'none', '?') [192.168.222.10] 192.168.222.10/24\n\nGateway? (or 'none') [none] none\n\nConfiguration for eth0:\n\n  type=static\n\n  address=192.168.222.10\n\n  netmask=255.255.255.0\n\n  gateway=\n\nDo you want to do any manual network configuration? (y/n) [n] n\n</code></pre>"},{"location":"practicas/8.-postgres-cliente-servidor/#servidor-dhcp","title":"SERVIDOR DHCP","text":"<p>Pasamos a configurar el servidor de dhcp:</p> <p>creamos fichero de configuraci\u00f3n:</p> <pre><code>cat &lt;&lt;'EOF' &gt; /etc/dnsmasq.conf\n\ninterface=eth0\n\ndhcp-range=192.168.222.20,192.168.222.199,255.255.255.0,24h\n\nlog-dhcp\n\ndhcp-leasefile=/var/lib/dnsmasq.leases\n\nEOF\n</code></pre> <p>Arrancamos el servicio, y lo activamos para que se inicie al hacer boot:</p> <pre><code>rc-service dnsmasq start\n\nrc-update add dnsmasq\n</code></pre> <p>reboot, verificamos con un cliente que da ip y que quedan en los logs:</p> <pre><code>dhcp-server:~# cat /var/lib/dnsmasq.leases \n\n1720464611 52:54:00:55:c4:d7 192.168.222.78 * *\n</code></pre> <p>Ya podemos apagar el escritorio y hacer una plantilla de servidor-dhcp-alpine</p>"},{"location":"practicas/8.-postgres-cliente-servidor/#servidor-postgres-en-debian","title":"Servidor postgres en debian","text":""},{"location":"practicas/8.-postgres-cliente-servidor/#plantilla-debian12-server","title":"Plantilla debian12 -server","text":"<p>Creamos un escritorio debian basado en la iso de debian 12</p> <p></p> <p>Instalamos como servidor, sin seleccionar entorno gr\u00e1fico. Seleccionamos ssh server.</p> <p></p> <p>Con el escritorio apagado, cambiamos el arranque a disco duro, quitamos iso y creamos plantilla debian12-server</p>"},{"location":"practicas/8.-postgres-cliente-servidor/#instalar-servicio-de-postgres","title":"Instalar servicio de postgres","text":"<p>A\u00f1adimos la interface de la red de grupo:</p> <p></p> <p>Congifuramos la interface. Por defecto debian 12 configura la red usando el servicio networking y el fichero /etc/network/interfaces. </p> <p>Nos convertimos en root y a\u00f1adimos estas l\u00edneas para la configuraci\u00f3n de la segunda tarjeta (enp2s0):</p> <pre><code>auto enp2s0\n\niface enp2s0 inet static\n\n    address 192.168.222.20\n\n    netmask 255.255.255.0\n</code></pre> <p>Reiniciamos el servicio:</p> <pre><code>systemctl restart networking\n</code></pre> <p>Instalamos sudo:</p> <pre><code>apt install sudo\n\nusermod -aG sudo isard\n\necho 'isard ALL=(ALL) NOPASSWD:ALL' | tee /etc/sudoers.d/isard\n\nisard ALL=(ALL) NOPASSWD:ALL\n</code></pre> <p>Iniciamos sesi\u00f3n como isard y verificamos que podemos hacer sudo sin que nos pida password</p> <p>Instalamos los paquetes de postgres:</p> <pre><code>sudo apt update\n\nsudo apt install -y postgresql postgresql-contrib\n</code></pre> <p>Configuramos que el servidor sea accesible por otros equipos:</p> <pre><code>#Cambiar listen_addresses a '*' en postgresql.conf\n\nsudo sed -i \"s/^#listen_addresses = 'localhost'/listen_addresses = '*'/\" /etc/postgresql/15/main/postgresql.conf\n\n\n\n#A\u00f1adir la l\u00ednea en pg_hba.conf \n\necho \"host    all             all             0.0.0.0/0               md5\" | sudo tee -a /etc/postgresql/15/main/pg_hba.conf\n</code></pre> <p>Verificamos que ha quedado bien configurado</p> <pre><code>isard@debian12:~$ grep listen_address /etc/postgresql/15/main/postgresql.conf\n\nlisten_addresses = '*'      # what IP address(es) to listen on;\n\nisard@debian12:~$ sudo tail -n 1 /etc/postgresql/15/main/pg_hba.conf \n\nhost    all             all             0.0.0.0/0               md5\n</code></pre> <p>Reiniciamos servicio y lo dejamos enable:</p> <pre><code>sudo systemctl restart postgresql\n\nsudo systemctl enable postgresql\n</code></pre> <p>Accedemos al shell de PostgreSQL:</p> <pre><code>sudo -u postgres psql\n</code></pre> <p>Creamos base de datos, con un usuario y concedemos todos los privilegios:</p> <pre><code>CREATE DATABASE testdb;\n\nCREATE USER testuser WITH ENCRYPTED PASSWORD 'pirineus';\n\nGRANT ALL PRIVILEGES ON DATABASE testdb TO testuser;\n\n\\q\n</code></pre> <p>Creamos un usaurio superuser que tenga todos los privilegios en postgres:</p> <pre><code>CREATE USER superuser WITH PASSWORD 'pirineus';\n\nALTER USER superuser WITH SUPERUSER;\n</code></pre>"},{"location":"practicas/8.-postgres-cliente-servidor/#clientes-postgres-en-fedora","title":"Clientes postgres en fedora","text":"<p>Creamos un escritorio basado en fedora 40. Actualizamos paquetes y reboot.</p> <pre><code>sudo dnf update\n\nreboot\n</code></pre> <p>Para instalar cliente de postrgres por l\u00ednea de comandos:</p> <pre><code>sudo dnf search postgresql\n\nsudo dnf install postgresql\n\nsudo systemctl disable postgres\n</code></pre> <p>Verificamos que funciona:</p> <pre><code>psql\n</code></pre> <p>Instalar pgadmin4 t cliente pgadmin4-desktop</p> <pre><code>sudo dnf -y install pgadmin4-langpack-es pgadmin4\n\n\n\nsudo rpm -i https://ftp.postgresql.org/pub/pgadmin/pgadmin4/yum/pgadmin4-fedora-repo-2-1.noarch.rpm\n\n\n\nsudo dnf install -y pgadmin4-desktop\n</code></pre> <p>Para instalar el cliente dbeaver vamos a la web de dbeaver y descargamos el fichero .rpm y lo instalamos.</p> <p>Verificamos que los clientes funcionan y podemos conectarnos:</p> <p>Cliente por l\u00ednea de comandos y creamos una tabla</p> <pre><code>PGPASSWORD=\"pirineus\" psql -h 192.168.222.20 -U superuser -d testdb\n</code></pre> <p>Nos conectamos y creamos una tabla:</p> <pre><code>CREATE TABLE test (\n\n    id SERIAL PRIMARY KEY,\n\n    description TEXT\n\n);\n</code></pre> <p>En pgAdmin4 configuramos la conexi\u00f3n y creamos una fila en la tabla test</p> <p></p> <p></p> <p>En DBeaver tambi\u00e9n dejamos preparada la conexi\u00f3n:</p> <p></p>"},{"location":"practicas/8.-postgres-cliente-servidor/#desplegar-a-usuarios","title":"Desplegar a usuarios","text":"<p>Hacemos plantillas del servidor de postgres y del escritorio con los clientes. </p> <p>Ya podemos desplegar el escritorio con los clientes y que los alumnos ataquen a la misma base de datos usando la red de grupo.</p> <p>Para que el escenario funcione el docente ha de encender previamente el servidor dhcp y el servidor de base de datos.</p>"},{"location":"practicas/9.-codimd/","title":"9. Codimd. Install","text":""},{"location":"practicas/9.-codimd/#docker","title":"docker","text":"<p>Install docker and docker-compose from https://docs.docker.com/engine/install/ubuntu/</p> <pre><code># Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n\"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n$(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\\nsudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre>"},{"location":"practicas/9.-codimd/#codimd","title":"codimd","text":"<p>Let's take a look at the docker-compose for codimd https://github.com/hackmdio/codimd/blob/develop/deployments/docker-compose.yml</p> <p>Adapt <code>database</code> and <code>codimd</code>. We did:</p> <ul> <li>Remove opened 3000 ports in <code>codimd</code> service.</li> <li>Set a SUPERSECRET_TO_BE_CHANGED new password</li> <li>Set MYDOMAIN.COM to your domain</li> <li>Add a caddy container and set it up to our domain and to reverse proxy to our codimd port 3000. It will also request letsencrypt certificate for domain (ports 80/443 should be opened)</li> </ul>"},{"location":"practicas/9.-codimd/#docker-composeyml","title":"docker-compose.yml","text":"<p>Copy final docker-compose.yml to /opt/codimd and <code>docker compose up -d</code>.</p> <pre><code>version: '3'\nvolumes:\n  caddy_data:\n  caddy_config:\n  database-data:\n  upload-data:\nservices:\n  caddy:\n    image: caddy\n    container_name: caddy\n    volumes:\n      - caddy_data:/data\n      - caddy_config:/config\n    ports:\n      - 80:80\n      - 443:443\n    command: caddy reverse-proxy --from MYDOMAIN.COM --to codimd:3000\n  database:\n    image: postgres:11.6-alpine\n    container_name: database\n    environment:\n      - POSTGRES_USER=codimd\n      - POSTGRES_PASSWORD=SUPERSECRET_TO_BE_CHANGED\n      - POSTGRES_DB=codimd\n    volumes:\n      - \"database-data:/var/lib/postgresql/data\"\n  codimd:\n    image: hackmdio/hackmd:2.5.4\n    container_name: codimd\n    environment:\n      - CMD_DB_URL=postgres://codimd:SUPERSECRET_TO_BE_CHANGED@database/codimd\n      - CMD_USECDN=false\n      - CMD_DOMAIN=MYDOMAIN.COM\n      - CMD_PROTOCOL_USESSL=true\n      - CMD_URL_ADDPORT=false\n      - CMD_ALLOW_ANONYMOUS=true\n      - CMD_ALLOW_ANONYMOUS_EDITS=true\n      - CMD_DEFAULT_PERMISSION=private\n      - CMD_IMAGE_UPLOAD_TYPE=filesystem\n      - CMD_ALLOW_PDF_EXPORT=true\n      - QT_QPA_PLATFORM=\n      - OPENSSL_CONF=/etc/ssl\n    depends_on:\n      - database\n    volumes:\n      - upload-data:/home/hackmd/app/public/uploads\n</code></pre>"},{"location":"seguridad/aplicativo/","title":"Seguridad Aplicativo (web)","text":"<p>Mecanismos de protecci\u00f3n de los accesos web</p>"},{"location":"seguridad/aplicativo/#haproxy","title":"HAPROXY","text":"<p>Nos permitir\u00e1 derivar las peticiones al servicio correspondiente. Bas\u00e1ndose en casi cualquier cosa que se pueda parsear de la petici\u00f3n.</p> <ul> <li>https://www.haproxy.org/</li> </ul> <p>En isard a\u00f1adimos tambi\u00e9n las blacklist de nuestro firewall.</p> <ul> <li>Blacklist</li> </ul> <p>Tambi\u00e9n incluye diversas sobreescrituras de cabeceras para securizar los accesos web, por defecto:</p> <ul> <li>PenTesting: https://portswigger.net/burp</li> </ul> <p>Cabeceras:</p> <pre><code># Security Headers\n#https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html\nhttp-response del-header X-Powered-By\nhttp-response del-header Server\nhttp-response set-header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\"\nhttp-response add-header X-Frame-Options DENY\nhttp-response add-header X-XSS-Protection 0\n# http-response set-header Content-Security-Policy:script-src https://&lt;scripts domains&gt; (only in devel)\nhttp-response add-header Referrer-Policy no-referrer\nhttp-response add-header X-Content-Type-Options nosniff\n\n# BEGIN CORS\nhttp-response add-header Access-Control-Allow-Origin \"${CORS}\"\nhttp-response add-header Access-Control-Allow-Headers \"Origin, X-Requested-With, Content-Type, Accept, Authorization\"\nhttp-response add-header Access-Control-Max-Age 3628800\nhttp-response add-header Access-Control-Allow-Methods \"GET, POST, PUT, DELETE\"\n</code></pre>"},{"location":"seguridad/aplicativo/#waf","title":"WAF","text":"<p>Es un cortafuegos que analizar\u00e1 las diferentes capas en las peticiones y/o respuestas web contrastando contra patrones de ataques para poder realizar acciones.</p>"},{"location":"seguridad/aplicativo/#owasp","title":"OWASP","text":"<p>Reglas de cortafuegos WEB</p> <ul> <li>https://owasp.org/about/</li> <li>https://github.com/coreruleset/coreruleset</li> </ul>"},{"location":"seguridad/aplicativo/#waf-apps","title":"WAF APPS","text":"<p>Cortafuegos WEB</p> <ul> <li>https://github.com/owasp-modsecurity/ModSecurity</li> <li>https://github.com/corazawaf/coraza</li> </ul>"},{"location":"seguridad/aplicativo/#sast","title":"SAST","text":"<p>An\u00e1lisis est\u00e1tico (librer\u00edas):</p> <p></p> <p></p>"},{"location":"seguridad/aplicativo/#dast","title":"DAST","text":"<p>An\u00e1lisis din\u00e1mico.</p> <p>Ataques de caja blanca/caja negra.</p>"},{"location":"seguridad/aplicativo/#siem","title":"SIEM","text":"<ul> <li>https://wazuh.com/</li> </ul> <p>Ejemplos de p\u00e1ginas con vulnerabilidades:</p> <ul> <li> <p>https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-2398</p> </li> <li> <p>https://nvd.nist.gov/vuln/detail/CVE-2024-2398</p> </li> <li> <p>https://ubuntu.com/security/notices/USN-6718-1</p> </li> </ul>"},{"location":"seguridad/sistemas/","title":"Seguridad Sistemas","text":""},{"location":"seguridad/sistemas/#firewall","title":"Firewall","text":"<p>Es recomendable al firewall a\u00f1adirle las listas de paises que m\u00e1s ataques genera:</p> <ul> <li>http://www.ipdeny.com/ipblocks/data/countries/all-zones.tar.gz</li> </ul> <p>Y tambi\u00e9n mantener actualizadas en el firewall las listas de IPs desde las que se generan m\u00e1s ataques:</p> <ul> <li>https://github.com/stamparm/ipsum</li> <li>https://www.spamhaus.org/</li> </ul>"},{"location":"seguridad/sistemas/#fail2ban","title":"Fail2ban","text":"<p>Bloquear\u00e1 la IP or\u00edgen si se realizan diversos intentos de autenticaci\u00f3n ssh err\u00f3neos:</p> <ul> <li>https://github.com/fail2ban/fail2ban</li> </ul>"},{"location":"seguridad/sistemas/#bastion","title":"Bastion","text":"<p>Nos permitir\u00e1 centralizar, auditar y establecer permisos de acceso a nuestros servidores en infraestructura:</p> <ul> <li>https://github.com/warp-tech/warpgate</li> </ul>"},{"location":"seguridad/sistemas/#knock","title":"Knock","text":"<p>Mecanismo de combinaci\u00f3n de puertos que nos permitir\u00e1 abrir o cerrar accesos (iptables) cuando ejecutemos las peticiones de puertos en orden correcto:</p> <ul> <li>https://github.com/jvinet/knock/</li> </ul>"}]}